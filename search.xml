<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WBE wp_1</title>
      <link href="/2019/07/26/wbe-wp-1/"/>
      <url>/2019/07/26/wbe-wp-1/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB-wp-1随笔"><a href="#WEB-wp-1随笔" class="headerlink" title="WEB wp_1随笔"></a>WEB wp_1随笔</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>​    最近得知了一个ctf赛题平台，想着没事刷刷，正好最近新博客重新弄得差不多了，正好就想着给博客充点电</p><h3 id="WarmUp"><a href="#WarmUp" class="headerlink" title="WarmUp"></a>WarmUp</h3><p>​    拿到题目啥都没有，查看源码，发现有source.php，</p><p><img src="1.png" alt></p><p>​    可以发现是一个php代码审计，传入参数必须为string，并且会检测”?”出现的位置，截取从第一个字符到?之间的字符进行判定是不是在白名单，如此遍可以构造出payload。</p><p>​    此外，我没可以发现白名单中有hint.php，进去一看发现有flag文件名，就可以直接读取flag了。</p><p><img src="2.png" alt></p><h3 id="随便注"><a href="#随便注" class="headerlink" title="随便注"></a>随便注</h3><p>​    以前做过了，直接可以发现不能用select正常思维的sql语句，有黑名单但明显黑名单过于少。</p><p><img src="3.png" alt></p><p>​    测试一下发现show形式可以，如下可以构造payload获取表的结构，发现该表下有两个表，一表为words就是我们直接查询回显的，一表猜测为falg的地址。</p><p>​    在此想法为将flag地址更改名称为words，如此遍可以利用输入框的查询功能直接查询字段内容，由于输入框是根据索引就是id号查询的，我们需要给flag所在表增加id</p><pre class=" language-mysql"><code class="language-mysql">1';alter table `1919810931114514` add(id int default 1);alter table words rename xxx;alter table `1919810931114514` rename words;</code></pre><p>​    然后通过直接输入1查询id为1的字段即可获得flag</p><p><img src="4.png" alt></p><h3 id="高明的黑客"><a href="#高明的黑客" class="headerlink" title="高明的黑客"></a>高明的黑客</h3><p>​    进入发现该网站给了源码，发现有一堆文件并且都是加了壳的，看着该题分数感觉不会太难应该有直接执行的参数，写份代码跑着：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> os path <span class="token operator">=</span> <span class="token string">"F:/wamp/www/src"</span>files  <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">panduan</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> bool<span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"Bleach"</span><span class="token punctuation">,</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> file <span class="token keyword">in</span> files<span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>file<span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>        cont <span class="token operator">=</span> file_object<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        idss <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"\$_GET\[\'(\S+)\'\]"</span><span class="token punctuation">,</span>cont<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"==================================="</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> ids <span class="token keyword">in</span> idss<span class="token punctuation">:</span>            r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://localhost/src/"</span><span class="token operator">+</span>file<span class="token punctuation">,</span>params<span class="token operator">=</span><span class="token punctuation">{</span>ids<span class="token punctuation">:</span><span class="token string">'echo Bleach'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> panduan<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>file<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>ids<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>                exit<span class="token punctuation">(</span><span class="token punctuation">)</span>        idss <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"\$_POST\[\'(\S+)\'\]"</span><span class="token punctuation">,</span>cont<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"============================================"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> ids <span class="token keyword">in</span> idss<span class="token punctuation">:</span>            r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://localhost/src/"</span><span class="token operator">+</span>file<span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token punctuation">{</span>ids<span class="token punctuation">:</span><span class="token string">'echo Bleach'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> panduan<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>file<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>ids<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>                exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"gg"</span><span class="token punctuation">)</span>    </code></pre><p>​    电脑比较炸需要爱护，跑了很久没出来就放弃了，看了wp测试了一下是可以跑出来真正的执行命令参数。</p><p><img src="5.png" alt></p><h3 id="easy-tornado"><a href="#easy-tornado" class="headerlink" title="easy_tornado"></a>easy_tornado</h3><p>​    进入发现三个文件可知文件的验证方式以及flag文件名，此外我们还需要获得cookie_secret，尝试发现当文件验证错误时的页面存在模板注入，使用可以获得cookie，然后直接读取即可</p><p><img src="7.png" alt></p><p>​    得到了cookie就可以根据提供的算法求出flag文件的hash验证，直接读取flag</p><p><img src="6.png" alt></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    后续慢慢更新吧，感觉有点水，太菜了orz</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github博客搭建</title>
      <link href="/2019/07/22/github/"/>
      <url>/2019/07/22/github/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​    前段时间重装了一遍系统，不小心把博客本地源文件删了，无法恢复很痛苦，在这里提醒各位一定要及时做好备份，可以不实时更新但是一定要留份原件，所以重新搭了一个博客，这个依旧是用的原来引用的博客，只不过和他一样换了个主题</p><p>​    <strong>原文地址：<a href="https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-2" target="_blank" rel="noopener">https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-2</a></strong></p><h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><hr><p>首先下载稳定版<a href="https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi" target="_blank" rel="noopener">Node.js</a>，我这里给的是64位的。</p><p>安装选项全部默认，一路点击<code>Next</code>。</p><p>最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p><h2 id="添加国内镜像源"><a href="#添加国内镜像源" class="headerlink" title="添加国内镜像源"></a>添加国内镜像源</h2><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org</code></pre><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><hr><p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————Git<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">[下载地址]</a>。</p><p>安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p><p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p><h1 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h1><hr><p>接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。</p><p>打开<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a>，新建一个项目，如下所示：</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/1.jpg" alt="img"></p><p>然后如下图所示，输入自己的项目名字，后面一定要加</p><pre><code>.github.io</code></pre><p>后缀，README初始化也要勾上。</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/2.jpg" alt="img"></p><p>然后项目就建成了，点击</p><pre><code>Settings</code></pre><p>，向下拉到最后有个</p><pre><code>GitHub Pages</code></pre><p>，点击</p><pre><code>Choose a theme</code></pre><p>选择一个主题。然后等一会儿，再回到</p><pre><code>GitHub Pages</code></pre><p>，会变成下面这样：</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/3.jpg" alt="img"></p><p>点击那个链接，就会出现自己的网页啦，效果如下：</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/4.jpg" alt="img"></p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><hr><p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在<code>D:\study\program\blog</code>目录下。</p><p>在该目录下右键点击<code>Git Bash Here</code>，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。</p><p>定位到该目录下，输入<code>npm i hexo-cli -g</code>安装Hexo。会有几个报错，无视它就行。</p><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件。</p><p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，就可以看到我们的博客啦，效果如下：</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/5.jpg" alt="img"></p><p>按<code>ctrl+c</code>关闭本地服务器。</p><h1 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a>连接Github与本地</h1><hr><p>首先右键打开git bash，然后输入下面命令：</p><pre><code>git config --global user.name &quot;godweiyang&quot;git config --global user.email &quot;792321264@qq.com&quot;</code></pre><p>用户名和邮箱根据你注册github的信息自行修改。</p><p>然后生成密钥SSH key：</p><pre><code>ssh-keygen -t rsa -C &quot;792321264@qq.com&quot;</code></pre><p>打开<a href="https://github.com/" target="_blank" rel="noopener">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便。</p><p>git bash中输入</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub</code></pre><p>将输出的内容复制到框中，点击确定保存。</p><p>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/6.jpg" alt="img"></p><p>打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p><p>修改最后一行的配置：</p><pre><code>deploy:  type: git  repository: https://github.com/godweiyang/godweiyang.github.io  branch: master</code></pre><p>repository修改为你自己的github项目地址。<strong>不过你这里看到的可能与我有点不一样，因为我已经修改过主题了，所以这一步先不用管，换完主题之后记得回来修改！</strong></p><h1 id="写文章、发布文章"><a href="#写文章、发布文章" class="headerlink" title="写文章、发布文章"></a>写文章、发布文章</h1><hr><p>首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。</p><p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p><p>然后打开<code>D:\study\program\blog\source\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p><h1 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h1><hr><p>现在默认的域名还是<code>xxx.github.io</code>，是不是很没有牌面？想不想也像我一样弄一个专属域名呢，首先你得购买一个域名，xx云都能买，看你个人喜好了。</p><p>以我的百度云为例，如下图所示，添加两条解析记录：</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/7.jpg" alt="img"></p><p>然后打开你的github博客项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存：</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/8.jpg" alt="img"></p><p>这时候你的项目根目录应该会出现一个名为<code>CNAME</code>的文件了。如果没有的话，打开你本地博客<code>/source</code>目录，我的是<code>D:\study\program\blog\source</code>，新建<code>CNAME</code>文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行<code>hexo g</code>、<code>hexo d</code>上传到github。</p><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><hr><p>网上大多数主题都是github排名第一的<code>Next</code>主题，但是我个人不是很喜欢，我更喜欢<code>beantech</code>主题，地址在<a href="https://github.com/YenYuHsuan/hexo-theme-beantech" target="_blank" rel="noopener">传送门</a>。</p><p>首先要注意的是，<strong>这个github项目不仅包含了主题文件，还包含了hexo的各种文件</strong>。</p><p>所以首先下载下来这个项目，然后推荐将下图所有文件全部替换你原本博客根目录下的文件：</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/9.jpg" alt="img"></p><p>当然一般的主题和这个主题有点不一样，只含有主题文件夹，所以把整个文件夹丢到<code>theme</code>下就行了。</p><p>然后运行<code>hexo clean</code>清空所有生成的网页缓存，<code>hexo g</code>、<code>hexo d</code>。这时候新的主题网页就生成好了，博客根目录的情况应该大致如下：</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/10.jpg" alt="img"></p><h1 id="博客目录构成介绍"><a href="#博客目录构成介绍" class="headerlink" title="博客目录构成介绍"></a>博客目录构成介绍</h1><hr><p>从上图可以看出，博客的目录结构如下：</p><pre><code>- node_modules- public- scaffolds- source    - _posts    - about    - archive    - img    - tags- themes</code></pre><p><code>node_modules</code>是node.js各种库的目录，<code>public</code>是生成的网页文件目录，<code>scaffolds</code>里面就三个文件，存储着新文章和新页面的初始设置，<code>source</code>是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，<code>themes</code>存放着主题文件，一般也用不到。</p><p>我们平时写文章只需要关注<code>source/_posts</code>这个文件夹就行了。</p><h1 id="个性化设置及bug处理"><a href="#个性化设置及bug处理" class="headerlink" title="个性化设置及bug处理"></a>个性化设置及bug处理</h1><hr><p><strong>首先打开_config.yml，根据自己需求配置，具体不说了，有注释。</strong></p><h2 id="修复文档分类bug"><a href="#修复文档分类bug" class="headerlink" title="修复文档分类bug"></a>修复文档分类bug</h2><p>这个主题文档分类功能有个bug，一直没有得到解决，直到最近，我才发现是源文件的单词拼错了。。。</p><p>打开<code>D:\study\program\blog\scaffolds\post.md</code>，单词<code>catagories</code>改为<code>categories</code>。</p><h2 id="添加畅言评论插件"><a href="#添加畅言评论插件" class="headerlink" title="添加畅言评论插件"></a>添加畅言评论插件</h2><p>主题自带了多说评论插件，但是多说已经关闭了，所以我换成了畅言评论插件。</p><p>首先你得注册一个畅言账号，<a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">地址</a>。<br>然后打开如下页面，复制该段代码：</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/11.jpg" alt="img"></p><p>打开</p><pre><code>D:\study\program\blog\themes\beantech\layout\post.ejs</code></pre><p>，将代码粘贴到如下位置：</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/12.jpg" alt="img"></p><p>然后重新生成一下网页，可以看到效果图如下：</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/13.jpg" alt="img"></p><p>更多插件例如热评话题之类的，可以自行在畅言后台找到代码添加。</p><h2 id="添加图片放大功能"><a href="#添加图片放大功能" class="headerlink" title="添加图片放大功能"></a>添加图片放大功能</h2><p>首先下载<code>zooming.js</code>文件<a href="https://github.com/godweiyang/godweiyang.github.io/blob/master/js/zooming.js" target="_blank" rel="noopener">地址</a>，保存在<code>D:\study\program\blog\themes\beantech\source\js</code>目录下。</p><p>打开<code>D:\study\program\blog\themes\beantech\layout\post.ejs</code>，在最下方粘贴如下代码：</p><pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/zooming.js&quot;&gt;&lt;/script&gt;</code></pre><p>然后文章里的图片就可以单击全屏啦。</p><h2 id="添加数学公式显示"><a href="#添加数学公式显示" class="headerlink" title="添加数学公式显示"></a>添加数学公式显示</h2><p>打开<code>D:\study\program\blog\themes\beantech\layout\post.ejs</code>，在最下方粘贴如下代码：</p><pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;</code></pre><p>由于markdown语法与mathjax语法存在冲突，所以还需要修改源文件。</p><p>打开<code>D:\study\program\blog\node_modules\marked\lib\marked.js</code><br><code>escape:</code>处替换成：</p><pre><code>escape: /^$[`*\[\]()#$+\-.!_&gt;])/</code></pre><p><code>em:</code>处替换成：</p><pre><code>em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</code></pre><p>这时在文章里写数学公式基本没有问题了，但是要注意：<br><strong>数学公式中如果出现了连续两个{，中间一定要加空格！</strong></p><p>举个例子:<br>行内公式：y=f(x)y=f(x)<br>代码：</p><pre><code>$y = f(x)$</code></pre><p>行间公式：</p><p>y=fg1(x)y=fg1(x)</p><p>代码：</p><pre><code>\\[y = {f_{ {g_1}}}(x)\\]</code></pre><p><strong>注意上面花括号之间有空格！</strong></p><h2 id="添加留言板"><a href="#添加留言板" class="headerlink" title="添加留言板"></a>添加留言板</h2><p>在<code>D:\study\program\blog\themes\beantech\layout</code>中新建<code>bbs.ejs</code>，文件内容如下：</p><pre><code>---layout: page---&lt;style type=&quot;text/css&quot;&gt;    header.intro-header{        background-position: right;     }&lt;/style&gt;&lt;!-- Chinese Version --&gt;&lt;div class=&quot;zh post-container&quot;&gt;    &lt;%- page.content %&gt;&lt;/div&gt;</code></pre><p>然后在<code>D:\study\program\blog\source</code>中新建<code>\bbs</code>文件夹，里面在新建<code>index.md</code>文件，内容如下：</p><pre><code>---layout: &quot;bbs&quot;title: &quot;BBS&quot;date: 2017-09-19 12:48:33description: &quot;欢迎交换友链，一起交流学习！&quot;header-img: &quot;img/header_img/home-bg-2-dark.png&quot;comments: true---此处替换为你的畅言评论代码~~~</code></pre><h2 id="添加置顶功能"><a href="#添加置顶功能" class="headerlink" title="添加置顶功能"></a>添加置顶功能</h2><p>运行如下两条命令安装置顶插件：</p><pre><code>npm uninstall hexo-generator-index --savenpm install hexo-generator-index-pin-top --save</code></pre><p>然后打开<code>D:\study\program\blog\themes\beantech\layout\index.ejs</code>，在如下位置添加代码：</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/14.jpg" alt="img"></p><pre><code>&lt;% if (post.top) {%>        置顶    |<%}%&gt;&lt; code&gt;< code></%}%&gt;&lt;></code></pre><p>然后在你想置顶的文章md文件里，添加如下配置选项：</p><pre><code>top: true</code></pre><h2 id="添加网易云音乐BGM"><a href="#添加网易云音乐BGM" class="headerlink" title="添加网易云音乐BGM"></a>添加网易云音乐BGM</h2><p>写文章的时候，想插入一段BGM怎么办？</p><p>首先打开网易云网页版，找到想听的歌曲，然后点击生成外链：</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/15.jpg" alt="img"></p><p>复制如下代码：</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/16.jpg" alt="img"></p><p>粘贴到文章里就行了，为了美观，设置一下居中，具体代码如下：</p><pre><code>&lt;div align=&quot;middle&quot;&gt;这里粘贴刚刚复制的代码&lt;/div&gt;</code></pre><h2 id="添加访客人数统计和字数统计"><a href="#添加访客人数统计和字数统计" class="headerlink" title="添加访客人数统计和字数统计"></a>添加访客人数统计和字数统计</h2><p>我们使用一个国外的流量统计网站：<a href="https://godweiyang.com/2018/04/13/hexo-blog/gostats.com" target="_blank" rel="noopener">gostats.com</a>，首先注册一下。</p><p>然后自己添加网站地址，过程就不详细说了，然后点击<code>Get counter code</code>，选择一个自己喜欢的风格。<br>如下图所示，选择一个样式，选择<code>HTML</code>，生成代码：</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/17.jpg" alt="img"></p><p>复制这段代码到<code>D:\study\program\blog\themes\beantech\layout\_partial\footer.ejs</code>，具体位置如下：</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/18.jpg" alt="img"></p><p>默认的代码和我图中不一样，因为我不想点击图片跳转到它统计网站的链接，可以模仿我的自行修改。</p><p>字数统计首先安装插件</p><pre><code>npm i --save hexo-wordcount</code></pre><p>然后打开<code>D:\study\program\blog\themes\beantech\layout\_partial\footer.ejs</code>，添加如下代码：</p><pre><code>&lt;span class=&quot;post-count&quot;&gt;&lt;%= totalcount(site) %&gt; words altogether&lt;/span&gt;</code></pre><p>具体位置见上图。</p><h1 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h1><hr><p>首先解释一下文章开头的配置，如下图所示：</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/19.jpg" alt="img"></p><pre><code>title: 文章标题catalog: 是否显示段落目录date: 文章日期subtitle: 子标题header-img: 顶部背景图片top: 是否置顶tags: 标签categories: 分类</code></pre><p>网站图片都保存在<code>D:\study\program\blog\source\img</code>目录下，可以修改成自己的图片。</p><p>如果换一台电脑想迁移博客的话，最简单的方法就是把博客整个目录拷贝过去，就是这么暴力。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/22/hello-world/"/>
      <url>/2019/07/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
